### 抽象过程
#### 解决问题的复杂性取决于抽象的类型和质量
#### 将问题空间中的元素及其解空间中的表示称为对象
#### 通过添加新类型的对象使自身适用于某个特定问题（无法类比为问题空间元素的对象）
###### 万物皆为对象
###### 程序是对象的集合，它们通过发消息来告知彼此所要做的。消息作为对某个特定对象方法的调用请求。
###### 每个对象都有自己的由其他对象所构成的存储。通过创建包含现有对象的包的方式来创建新类型的对象。在程序中构建复杂的体系，同时将其复杂性隐藏在对象的简单性背后。
###### 每个对象都用有其类型。每个对象都是某个类class的实例instance。每个class最重要区别于其他class的特性就是可以给它发怎样的消息。
###### 某一特定类型的所有对象都可以接收同样的消息。
#### 对象具有形态、行为和标识
#### 每一个对象都可以拥有内部数据（对象的状态）和方法（对象产生的行为），每个对象都可以唯一的与其他对象区分（在内存中有唯一的地址）
### 每个对象都有一个接口
#### 所有对象都是唯一的，但也是具有相同的特性和行为的对象所归属的类的一部分
#### 创建抽象数据类型（类class）是面向对象设计的基本概念。抽象数据类型的运行方式和内置（build-in）类型几乎完全一致：创建某类型的变量（对象或实例），然后操作这些变量（发消息）。每个类的成员或元素都具有某种共性、都有自身的状态、每一个对象都属于定义了特性和行为的某个特定的类。
